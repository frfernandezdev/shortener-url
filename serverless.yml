service: laravel

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-1
    # The stage of the application, e.g. dev, prod, stagingâ€¦ ('dev' by default)
    stage: prod
    # Environment variables
    environment:
        NODE_ENV: production
        APP_NAME: ShortenerUrl
        APP_ENV: production # Or use ${sls:stage} if you want the environment to match the stage
        APP_KEY: ${ssm:/shortener-url/app_key}
        APP_DEBUG: false
        APP_TIMEZONE: UTC

        APP_LOCALE: en
        APP_FALLBACK_LOCALE: en
        APP_FAKER_LOCALE: en_US

        APP_MAINTENANCE_DRIVER: file
        # APP_MAINTENANCE_STORE=database

        BCRYPT_ROUNDS: 12

        LOG_CHANNEL: stack
        LOG_STACK: single
        LOG_DEPRECATIONS_CHANNEL: null
        LOG_LEVEL: debug

        DB_CONNECTION: pgsql
        DB_HOST: ${ssm:/shortener-url/db_host}
        DB_PORT: ${ssm:/shortener-url/db_port}
        DB_DATABASE: ${ssm:/shortener-url/db_database}
        DB_USERNAME: ${ssm:/shortener-url/db_username}
        DB_PASSWORD: ${ssm:/shortener-url/db_password}

        SESSION_DRIVER: database
        SESSION_LIFETIME: 120
        SESSION_ENCRYPT: false
        SESSION_PATH: /
        SESSION_DOMAIN: null

        BROADCAST_CONNECTION: log
        FILESYSTEM_DISK: s3
        FILESYSTEM_DISK_PUBLIC: s3
        QUEUE_CONNECTION: database

        CACHE_STORE: database
        CACHE_PREFIX:

        MEMCACHED_HOST: memcached

        REDIS_CLIENT: phpredis
        REDIS_HOST: redis
        REDIS_PASSWORD: null
        REDIS_PORT: 6379

        MAIL_MAILER: log
        MAIL_HOST: 127.0.0.1
        MAIL_PORT: 2525
        MAIL_USERNAME: null
        MAIL_PASSWORD: null
        MAIL_ENCRYPTION: null
        MAIL_FROM_ADDRESS: "hello@example.com"
        MAIL_FROM_NAME: ${APP_NAME}

        AWS_BUCKET: !Ref Storage

        VITE_APP_NAME: ${APP_NAME}

        WWWGROUP: 1000
        WWWUSER: 1000

    iam:
        role:
            statements:
                # Allow Lambda to read and write files in the S3 buckets
                -   Effect: Allow
                    Action: s3:*
                    Resource:
                        - !Sub '${Storage.Arn}' # the storage bucket
                        - !Sub '${Storage.Arn}/*' # and everything inside

plugins:
  - ./vendor/bref/bref
  - ./vendor/bref/extra-php-extensions # <----- Add the extra Serverless plugin
  - serverless-lift

resources:
    Resources:
        # Create our S3 storage bucket using CloudFormation
        Storage:
            Type: AWS::S3::Bucket

package:
    # Files and directories to exclude from deployment
    patterns:
        - '!node_modules/**'
        - '!public/storage'
        - '!resources/assets/**'
        - '!storage/**'
        - '!tests/**'

functions:
    # This function runs the Laravel website/API
    web:
        handler: Bref\LaravelBridge\Http\OctaneHandler
        runtime: php-83-fpm
        # memorySize: 128 # set to 512M instead of 1024M (the default)
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        events:
            - httpApi: '*'
        environment:
            BREF_LOOP_MAX: 250
            OCTANE_PERSIST_DATABASE_SESSIONS: 1

    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        runtime: php-83-console
        timeout: 720 # in seconds

constructs:
    website:
        type: server-side-website
        assets:
            '/build/*': public/build
            '/docs/*': storage/api-docs
            '/favicon.ico': public/favicon.ico
            '/robots.txt': public/robots.txt
            # add here any file or directory that needs to be served from S3
